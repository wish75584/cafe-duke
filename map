package com.stubborn.currentlocation;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;

import android.location.Location;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;

public class MainActivity extends AppCompatActivity {


    String[] PERMISSIONS = {
            Manifest.permission.ACCESS_COARSE_LOCATION,
            Manifest.permission.ACCESS_FINE_LOCATION,
    };

    private FusedLocationProviderClient mfusedloc;

    private GoogleMap map;
    private static final float Default_Zoom = 15f;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (checkPerm()) {
            initMap();
        } else {
            requestContactsPermissions();
        }
    }


    private void getDeciceLocation() {
        Log.e("getting location", "DEvice location");

        mfusedloc = LocationServices.getFusedLocationProviderClient(this);

        try {
            if (checkPerm()) {
                Task location = mfusedloc.getLastLocation();
                ((Task) location).addOnCompleteListener(new OnCompleteListener() {
                    @Override
                    public void onComplete(@NonNull Task task) {

                        if (task.isSuccessful()) {

                            Log.e("Success", "found location");
                            Location curremtlocation = (Location) task.getResult();

                            moveCamera(new LatLng(curremtlocation.getLatitude(), curremtlocation.getLongitude()),
                                    Default_Zoom)
                            ;

                        } else {
                            Log.e("failed", "Could find location");
                        }

                    }
                });

            }
        } catch (SecurityException e) {

            Log.e("Het Dvice location ", "Device location" + e.getMessage());
        }

    }


    //to move location

    private void moveCamera(LatLng ltlg, float zoom) {
        Log.e("Location", "Moving locstion " + ltlg.latitude + ltlg.longitude + "");
        map.moveCamera(CameraUpdateFactory.newLatLngZoom(ltlg, zoom));

    }


    //map code
    private void initMap() {
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        Log.e("Initializing map", "Initializing map");

        mapFragment.getMapAsync(new OnMapReadyCallback() {

            @Override
            public void onMapReady(GoogleMap googleMap) {
                Log.e("Onmap ready ", "Map is ready");
                Toast.makeText(MainActivity.this, "map is ready ", Toast.LENGTH_SHORT).show();
                map = googleMap;

                if (checkPerm()) {
                    getDeciceLocation();

                    if (ActivityCompat.checkSelfPermission(MainActivity.this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(MainActivity.this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {

                        return;
                    }
                    map.setMyLocationEnabled(true);

                }

            }
        });

    }


    //checking permisiions
    public boolean checkPerm() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION)
                != PackageManager.PERMISSION_GRANTED
                || ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {
            requestContactsPermissions();
            return false;
        }
        return true;
    }


    //requesting for permissions
    private void requestContactsPermissions() {
        if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.ACCESS_COARSE_LOCATION)
                || ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.ACCESS_FINE_LOCATION)
                ) {
            ActivityCompat.requestPermissions(this, PERMISSIONS, 1);
        } else {
            ActivityCompat.requestPermissions(this, PERMISSIONS, 1);
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);


        Log.e("step","inside result");
        Log.e("requestCode","requestCode - "+requestCode);
        Log.e("resultCode","expected - " + RESULT_OK);
        Log.e("resultCode","resultCode - "+resultCode);

        if(requestCode == 1 && resultCode == Activity.RESULT_OK);

        initMap();
    }
}

